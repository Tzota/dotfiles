{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"json stringify": {
		"prefix": "jsnstr",
		"body": "JSON.stringify(${1}, null, 4)"
	},
	"console visible log": {
		"prefix": "clnnn",
		"body": "console.log('\\n\\n${2}\\n\\n', ${1}, '\\n\\n/${2}\\n\\n');"
	},
	"unit test's describe": {
		"prefix": "cds",
		"body": [
			"describe('${1:Описание_сьюта}', () => {",
				"$0",
			"});"
		],
		"description": "Добавить describe"
	},
	"unit test's it": {
		"prefix": "cit",
		"body": [
			"it('${1:Описание_кейса}', () => {",
				"$0",
			"});"
		],
		"description": "Добавить describe"
	},
	"unit test's expect": {
		"prefix": "cex",
		"body": [
			"expect(${1}).toBe(${0});"
		],
		"description": "Добавить expect"
	},
	"region": {
		"prefix": "region",
		"body": "// #region ${0}\n// #endregion",
		"description": "добавить #region"
	},
	"require": {
		"prefix": "rqr",
		"body": "const {${0}} = require('${1}');",
		"description": "добавить common js require"
	},
	"import": {
		"prefix": "mprt",
		"body": "import {${0}} from '${1}';",
		"description": "добавить js module import"
	},
	"eslint-disable-next-line": {
		"prefix": "ednl",
		"body": "// eslint-disable-next-line ${0}",
		"description": "добавить eslint-disable-next-line"
	},
	"istanbul ignore file": {
		"prefix": "iif",
		"body": "/* istanbul ignore file */",
		"description": "добавить istanbul ignore file"
	},
	"istanbul ignore next": {
		"prefix": "iin",
		"body": "/* istanbul ignore next */",
		"description": "добавить istanbul ignore next"
	},
	"istanbul ignore next for default": {
		"prefix": "iindef",
		"body": "/* istanbul ignore next не вижу смысла проверять присвоение значения по умолчанию, это же конструкция языка */",
		"description": "добавить iin для значений по умолчанию"
	},
	"jest mock control": {
		"prefix": "jmc",
		"description": "мока контрола для джеста",
		"body": [
			"jest.mock('${1}', () => {",
			"    const ${2} = ({children}) => children || '';",
			"",
			"    return ${2};",
			"});"
		]
	},
	"jest mock module": {
		"prefix": "jmm",
		"description": "мока es модуля для джеста",
		"body": [
			"jest.mock('${1}', () => ({",
			"    __esModule: true,",
			"    ${2}",
			"}));"
		]
	},
	"fokkin' ts' enum": {
		"prefix": "fte",
		"description": "енум в ts удивительно коряв",
		"body": [
			"type ${1}Key = keyof typeof ${1};",
			"type ${1}Enum = typeof ${1}[${1}Key];"
		]
	}
}
